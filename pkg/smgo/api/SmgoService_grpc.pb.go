// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SmgoServiceClient is the client API for SmgoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SmgoServiceClient interface {
	// Get System stat info in JSON
	GetSysStat(ctx context.Context, in *GetSysStatRequest, opts ...grpc.CallOption) (SmgoService_GetSysStatClient, error)
}

type smgoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSmgoServiceClient(cc grpc.ClientConnInterface) SmgoServiceClient {
	return &smgoServiceClient{cc}
}

func (c *smgoServiceClient) GetSysStat(ctx context.Context, in *GetSysStatRequest, opts ...grpc.CallOption) (SmgoService_GetSysStatClient, error) {
	stream, err := c.cc.NewStream(ctx, &SmgoService_ServiceDesc.Streams[0], "/smgo.SmgoService/GetSysStat", opts...)
	if err != nil {
		return nil, err
	}
	x := &smgoServiceGetSysStatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SmgoService_GetSysStatClient interface {
	Recv() (*GetSysStatResponse, error)
	grpc.ClientStream
}

type smgoServiceGetSysStatClient struct {
	grpc.ClientStream
}

func (x *smgoServiceGetSysStatClient) Recv() (*GetSysStatResponse, error) {
	m := new(GetSysStatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SmgoServiceServer is the server API for SmgoService service.
// All implementations must embed UnimplementedSmgoServiceServer
// for forward compatibility
type SmgoServiceServer interface {
	// Get System stat info in JSON
	GetSysStat(*GetSysStatRequest, SmgoService_GetSysStatServer) error
	mustEmbedUnimplementedSmgoServiceServer()
}

// UnimplementedSmgoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSmgoServiceServer struct {
}

func (UnimplementedSmgoServiceServer) GetSysStat(*GetSysStatRequest, SmgoService_GetSysStatServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSysStat not implemented")
}
func (UnimplementedSmgoServiceServer) mustEmbedUnimplementedSmgoServiceServer() {}

// UnsafeSmgoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmgoServiceServer will
// result in compilation errors.
type UnsafeSmgoServiceServer interface {
	mustEmbedUnimplementedSmgoServiceServer()
}

func RegisterSmgoServiceServer(s grpc.ServiceRegistrar, srv SmgoServiceServer) {
	s.RegisterService(&SmgoService_ServiceDesc, srv)
}

func _SmgoService_GetSysStat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSysStatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SmgoServiceServer).GetSysStat(m, &smgoServiceGetSysStatServer{stream})
}

type SmgoService_GetSysStatServer interface {
	Send(*GetSysStatResponse) error
	grpc.ServerStream
}

type smgoServiceGetSysStatServer struct {
	grpc.ServerStream
}

func (x *smgoServiceGetSysStatServer) Send(m *GetSysStatResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SmgoService_ServiceDesc is the grpc.ServiceDesc for SmgoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SmgoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smgo.SmgoService",
	HandlerType: (*SmgoServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSysStat",
			Handler:       _SmgoService_GetSysStat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/SmgoService.proto",
}
